---
http_interactions:
- request:
    method: get
    uri: http://archive.org/download/firstbooknapole00gruagoog/firstbooknapole00gruagoog_files.xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.14.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 302
      message: Found
    headers:
      Server:
      - nginx/1.4.6 (Ubuntu)
      Date:
      - Mon, 05 Mar 2018 04:58:41 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Accept-Ranges:
      - bytes
      Location:
      - http://ia801406.us.archive.org/26/items/firstbooknapole00gruagoog/firstbooknapole00gruagoog_files.xml
    body:
      encoding: UTF-8
      string: ''
    http_version: 
  recorded_at: Mon, 05 Mar 2018 04:58:41 GMT
- request:
    method: get
    uri: http://ia801406.us.archive.org/26/items/firstbooknapole00gruagoog/firstbooknapole00gruagoog_files.xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.14.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.4.6 (Ubuntu)
      Date:
      - Mon, 05 Mar 2018 04:58:43 GMT
      Content-Type:
      - text/xml
      Last-Modified:
      - Wed, 01 Jun 2016 08:16:59 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Expires:
      - Mon, 05 Mar 2018 10:58:43 GMT
      Cache-Control:
      - max-age=21600
    body:
      encoding: ASCII-8BIT
      string: |
        <?xml version="1.0" encoding="UTF-8"?>
        <files>
          <file name="firstbooknapole00gruagoog_desc.html" source="original">
            <format>Metadata</format>
            <original-name>books?id=6scCAAAAYAAJ&amp;oe=UTF-8</original-name>
            <size>23775</size>
            <atime>1185590020</atime>
            <mtime>1185576678</mtime>
            <ctime>1185590020</ctime>
            <md5>e32b177b2c6e6be884ec16c8d8969ab2</md5>
            <sha1>a2b13cd121dd30c1f7e564931e3b20e17aa969d3</sha1>
            <crc32>df3dcf2a</crc32>
          </file>
          <file name="firstbooknapole00gruagoog_abbyy.gz" source="derivative">
            <format>Abbyy GZ</format>
            <original>firstbooknapole00gruagoog_tif.zip</original>
            <md5>010cb07b57b37f770dcf2b84218429ea</md5>
            <mtime>1213983199</mtime>
            <size>2193095</size>
            <crc32>e8437080</crc32>
            <sha1>0c2503f2b44bb779228b2f8b204052d8b767eadc</sha1>
          </file>
          <file name="firstbooknapole00gruagoog_scandata.xml" source="derivative">
            <format>Scandata</format>
            <original>firstbooknapole00gruagoog_djvu.xml</original>
            <md5>a3c97579f8029d85f97da45d16c6c336</md5>
            <mtime>1243247240</mtime>
            <size>48407</size>
            <crc32>d13bc554</crc32>
            <sha1>a72e3877956915f2f8ca17e18ddc625aa4b3d8a8</sha1>
          </file>
          <file name="firstbooknapole00gruagoog_tif.zip" source="derivative">
            <format>Single Page Processed TIFF ZIP</format>
            <original>firstbooknapole00gruagoog.pdf</original>
            <md5>e81a2968d4e82a605acc1ed2fa1a82bc</md5>
            <mtime>1213981431</mtime>
            <size>6593452</size>
            <crc32>a03ad159</crc32>
            <sha1>81e3d45a4f64b2deda406d8df99c378330ca59d3</sha1>
          </file>
          <file name="firstbooknapole00gruagoog.gif" source="derivative">
            <format>Animated GIF</format>
            <original>firstbooknapole00gruagoog_tif.zip</original>
            <md5>bd69541440b72a570ff1a24ae9243ddb</md5>
            <mtime>1213981465</mtime>
            <size>105290</size>
            <crc32>dfd774e9</crc32>
            <sha1>e55b43e3bb588a194863e0466f5978d58dfc4ff6</sha1>
          </file>
          <file name="firstbooknapole00gruagoog.pdf" source="original">
            <format>Image Container PDF</format>
            <original-name>The_First_Book_of_Napoleon__the_Tyrant_o.pdf?id=6scCAAAAYAAJ&amp;output=pdf&amp;sig=13CxNmetO67msnXkK6niFe11YyU</original-name>
            <size>3768681</size>
            <atime>1193859275</atime>
            <mtime>1193844959</mtime>
            <ctime>1193859275</ctime>
            <md5>3b99679a0dc05bd5b9195101f71a42ee</md5>
            <sha1>8f293916498a217e46154ce738a815e8faf560f0</sha1>
            <crc32>c34519b2</crc32>
          </file>
          <file name="firstbooknapole00gruagoog_djvu.txt" source="derivative">
            <format>DjVuTXT</format>
            <original>firstbooknapole00gruagoog.djvu</original>
            <md5>6c5b8b505a8786d2c16988234eb6bb42</md5>
            <mtime>1213983393</mtime>
            <size>134296</size>
            <crc32>1dec7714</crc32>
            <sha1>d587dd13b13f6a501206288ab244c79638f97023</sha1>
          </file>
          <file name="firstbooknapole00gruagoog_djvu.xml" source="derivative">
            <format>Djvu XML</format>
            <original>firstbooknapole00gruagoog_abbyy.gz</original>
            <md5>6cf01b547002d8b946b50ac29a70f4e4</md5>
            <mtime>1213983272</mtime>
            <size>1394702</size>
            <crc32>764e007e</crc32>
            <sha1>d44678260b628d2fe29ede6b24a0447eecd32d28</sha1>
          </file>
          <file name="firstbooknapole00gruagoog.djvu" source="derivative">
            <format>DjVu</format>
            <original>firstbooknapole00gruagoog_djvu.xml</original>
            <md5>45ce5a558003430831943f944da46056</md5>
            <mtime>1213983375</mtime>
            <size>3348964</size>
            <crc32>52851d81</crc32>
            <sha1>6f60f54b9fb6c11422ec37723d1dfdd770466b37</sha1>
          </file>
          <file name="firstbooknapole00gruagoog_reviews.xml" source="original">
            <mtime>1431018857</mtime>
            <size>868</size>
            <md5>14c43e62cf8bc765f1712a75f34d6967</md5>
            <crc32>194805ad</crc32>
            <sha1>ed21832613899035086798d4ec6caeb6727193f2</sha1>
            <format>Metadata</format>
          </file>
          <file name="firstbooknapole00gruagoog_meta.xml" source="metadata">
            <format>Metadata</format>
            <mtime>1464769018</mtime>
            <size>1328</size>
            <md5>92ed6c71700d4571d01f9ef7409776a9</md5>
            <crc32>d6a54f68</crc32>
            <sha1>f34676695e9cb120da35e78f9c31e42ceb0d011d</sha1>
          </file>
          <file name="firstbooknapole00gruagoog_archive.torrent" source="metadata">
            <btih>65e166169794cdc7c950dc2a16b4aa5668ad3bd7</btih>
            <mtime>1464769019</mtime>
            <size>3761</size>
            <md5>9476c4d7598a3cdfa655c439e78f7c1a</md5>
            <crc32>753aec77</crc32>
            <sha1>60fcc0d7074bd8c5d2cba01842e4adcfc7c584d1</sha1>
            <format>Archive BitTorrent</format>
          </file>
          <file name="firstbooknapole00gruagoog_files.xml" source="metadata">
            <format>Metadata</format>
            <md5>f97ab18bb52c232b5544e2d13631ec3d</md5>
          </file>
        </files>
    http_version: 
  recorded_at: Mon, 05 Mar 2018 04:58:43 GMT
- request:
    method: get
    uri: http://archive.org/download/firstbooknapole00gruagoog/firstbooknapole00gruagoog_djvu.txt
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.14.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 302
      message: Found
    headers:
      Server:
      - nginx/1.4.6 (Ubuntu)
      Date:
      - Mon, 05 Mar 2018 04:58:45 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Accept-Ranges:
      - bytes
      Location:
      - http://ia601406.us.archive.org/26/items/firstbooknapole00gruagoog/firstbooknapole00gruagoog_djvu.txt
    body:
      encoding: UTF-8
      string: ''
    http_version: 
  recorded_at: Mon, 05 Mar 2018 04:58:45 GMT
- request:
    method: get
    uri: http://ia601406.us.archive.org/26/items/firstbooknapole00gruagoog/firstbooknapole00gruagoog_djvu.txt
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.14.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.4.6 (Ubuntu)
      Date:
      - Mon, 05 Mar 2018 04:58:47 GMT
      Content-Type:
      - text/plain
      Last-Modified:
      - Fri, 20 Jun 2008 17:36:33 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Expires:
      - Mon, 05 Mar 2018 10:58:47 GMT
      Cache-Control:
      - max-age=21600
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 05 Mar 2018 04:58:49 GMT
recorded_with: VCR 4.0.0
